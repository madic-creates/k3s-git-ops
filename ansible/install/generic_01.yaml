---
# code: language=ansible

- name: Longhorn | enabling iscsid
  ansible.builtin.systemd:
    state: started
    name: iscsid.service
    enabled: true

- name: Disabling firewalld and stoping its service
  ansible.builtin.systemd:
    name: firewalld
    state: stopped
    enabled: false
  register: result_systemd_stop
  failed_when: "result_systemd_stop is failed and 'Could not find the requested service' not in result_systemd_stop.msg"

- name: Disabling SELinux
  when: ansible_selinux.status == "enabled"
  block:
    - name: Disabling SELinux
      ansible.posix.selinux:
        policy: targeted
        state: permissive

    - name: Deactivating SELinux on boot
      ansible.builtin.lineinfile:
        path: /etc/selinux/config
        regexp: "^SELINUX=.*$"
        line: "SELINUX=disabled"

# Required for kubectl port-forwarding
- name: Adding 127.0.0.1 localhost to hosts file
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "127.0.0.1 localhost"
    state: present
    backup: true
    insertbefore: BOF

- name: Get service facts
  ansible.builtin.service_facts:

- name: Generic | Check if /etc/resolv.conf exists
  ansible.builtin.stat:
    path: /etc/resolv.conf
  register: resolv_conf

- name: Generic | Configure systemd-resolved to manage /etc/resolv.conf
  when: (ansible_facts.services.get('systemd-resolved.service', {}).get('status', 'disabled') == 'enabled') and
        (resolv_conf.stat.exists) and
        (resolv_conf.stat.islnk == false or resolv_conf.stat.lnk_source != '/run/systemd/resolve/stub-resolv.conf')
  block:
    - name: Generic | Backup /etc/resolv.conf to /etc/resolv.conf.bak
      ansible.builtin.copy:
        src: /etc/resolv.conf
        dest: /etc/resolv.conf.bak

    - name: Generic | Deleting /etc/resolv.conf
      ansible.builtin.file:
        path: /etc/resolv.conf
        state: absent

    - name: Generic | Link systemd-resolved to resolv.conf
      ansible.builtin.file:
        src: /run/systemd/resolve/stub-resolv.conf
        dest: /etc/resolv.conf
        state: link
      when: not ansible_check_mode

- name: Creating directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  with_items:
    - /etc/rancher/k3s
    - /root/.kube

- name: Copying k3s configurations to /etc/rancher/k3s/
  ansible.builtin.copy:
    content: "{{ item.content }}"
    dest: "/etc/rancher/k3s/{{ item.name }}"
    owner: root
    group: root
    mode: "0644"
  # Do not display in ansible output
  #no_log: true
  with_items:
    - "{{ K3S_REGISTRIES }}"
    - "{{ K3S_KUBELET }}"

# - name: Downloading K3S installation script
#   ansible.builtin.get_url:
#     url: https://get.k3s.io
#     dest: /tmp/k3s_install.sh
#     mode: "0750"

## Shell module because inside test environment, get_url outputs an error
- name: Downloading K3S installation script if it does not exist
  ansible.builtin.shell:
    cmd: curl -sfL https://get.k3s.io -o /tmp/k3s_install.sh && chmod 0750 /tmp/k3s_install.sh
  args:
    creates: /tmp/k3s_install.sh

- name: Installing | K3S Server
  when: "'k3s_server' in group_names"
  block:
    - name: K3S Server | Creating local config directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        # owner: "{{ ansible_user_id }}"
        # group: "{{ ansible_user_id }}"
        # mode: "0755"
      become: false
      delegate_to: localhost
      with_items:
        - ../shared/{{ groups['k3s_server'][0] }}

    - name: K3S Server | Copying configuration to /etc/rancher/k3s/
      ansible.builtin.copy:
        content: "{{ item.content }}"
        dest: "/etc/rancher/k3s/{{ item.name }}"
        owner: root
        group: root
        mode: "0644"
      # Do not display in ansible output
      no_log: true
      with_items:
        - "{{ K3S_SERVER_CONFIG}}"

    - name: K3S Server | Installing
      ansible.builtin.command: "/tmp/k3s_install.sh"
      environment:
        K3S_TOKEN: "{{ K3S_TOKEN }}"
      changed_when: true

    - name: K3S Server | Fetching ca certificate
      ansible.builtin.fetch:
        src: /var/lib/rancher/k3s/server/tls/server-ca.crt
        dest: ../shared/{{ groups['k3s_server'][0] }}/
        flat: true
      run_once: true

- name: Installing | K3S Agent
  when: "'k3s_agent' in group_names"
  block:
    - name: K3S Agent | Copying configuration to /etc/rancher/k3s/
      ansible.builtin.copy:
        content: "{{ item.content }}"
        dest: "/etc/rancher/k3s/{{ item.name }}"
        owner: root
        group: root
        mode: "0644"
      # Do not display in ansible output
      #no_log: true
      with_items:
        - "{{ K3S_AGENT_CONFIG}}"

    - name: K3S Agent | Installing
      ansible.builtin.command: "/tmp/k3s_install.sh"
      environment:
        K3S_TOKEN: "{{ K3S_TOKEN }}"
        K3S_URL: "https://{{ K3S_IP_ADDRESS }}:6443"
      changed_when: true
